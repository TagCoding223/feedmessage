import dbConnect from "@/lib/dbConnect";
import UserModel from "@/models/User";
import bcrypt from "bcryptjs";
import NextAuth, { Awaitable } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

const handler = NextAuth({
    providers: [
        CredentialsProvider({

            name: 'Credentials',

            credentials: {
                email: { label: "Email", type: "email" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials, req) {
                // You need to provide your own logic here that takes the credentials
                // submitted and returns either a object representing a user or value
                // that is false/null if the credentials are invalid.
                // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }
                // You can also use the `req` object to obtain additional parameters
                // (i.e., the request IP address)

                console.log("i'm a req that hold credentials:", req.body)
                console.log("Email : ", req.body?.email)
                console.log("Password : ", req.body?.password)

                const email = req.body?.email
                const password = req.body?.password
                dbConnect()
                const getUserFromDB = await UserModel.findOne(
                    { email: email }
                )

                const user = getUserFromDB?.toJSON()

                if(user){
                    return user;
                }

                console.log(user)
                if (!user) {
                    return Response.json({
                        success: false,
                        message: "User not found."
                    }, { status: 404 }) // 404 not found
                } else {
                    console.log("i'm here")
                    const isPasswordCorrect = await bcrypt.compare(password, user?.password.toString());
                    console.log(isPasswordCorrect)
                    if (!isPasswordCorrect) {
                        return Response.json({
                            success: false,
                            message: "Incorrect Credentials."
                        }, { status: 401 }) // 401 UNAUTHORIZED 
                    } else {
                        // when we need user info at frontend
                        // Response.json({
                        //     success: true,
                        //     message: "Login/Signin Successfull.",
                        //     user: user,
                        // },{status: 200})

                        // custom way
                        // Response.json({
                        //     success: true,
                        //     message: "Login/Signin Successfull.",
                        // }, { status: 200 })

                        
                    }
                }

                const res = await fetch("/your/endpoint", {
                    method: 'POST',
                    body: JSON.stringify(credentials),
                    headers: { "Content-Type": "application/json" }
                })
                const user1 = await res.json()

                // If no error and we have user data, return it
                if (user1) {
                  //  return user1
                }
                //   Return null if user data could not be retrieved
                // return user
            }
        })

    ],
    session: {
        strategy: "jwt"
    },
    secret: process.env.NEXTAUTH_SECRET,
    callbacks: {
        async jwt({token,user}){
            if(user){
                token._id = user._id?.toString();
                token.isVerified = user.isVerified;
                token.isAcceptingMessages = user.isAcceptingMessages;
                token.username = user.username;
            }
            return token
        },
        async session({session, token}){
            if(token){
                session.user._id = token._id?.toString();
                session.user.isVerified = token.isVerified;
                session.user.isAcceptingMessages = token.isAcceptingMessages;
                session.user.username = token.username;
            }
            return session
        }
    }
})

export { handler as GET, handler as POST }