import dbConnect from "@/lib/dbConnect";
import UserModel, { User } from "@/models/User";
import bcrypt from "bcryptjs";
import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

export default NextAuth({
    providers: [
        CredentialsProvider({
            id: "credentials",
            name: "Credentials",
            credentials: {
                email: {
                    label: "Email", type: "text"
                },
                password: {
                    label: "Password", type: "password"
                }
            },
            async authorize(credentials): Promise<User | null>{
                console.log(credentials?.email)
                await dbConnect();
                try {
                    const user = await UserModel.findOne({
                        $or: [
                            {email: credentials?.identifier},
                            {username: credentials?.identifier}
                        ]
                    })

                    if(!user){
                        throw new Error("No user found.");
                    }

                    if (user.isVerified) {
                        throw new Error("Please verify your account before login.")
                    }

                    const isPasswordCorrect = await bcrypt.compare(credentials.password, user.password.toString());

                    if (isPasswordCorrect) {
                        return user
                    }else{
                        throw new Error("Incorrect Password.")
                    }
                } catch (error) {
                    throw new Error(error instanceof Error ? error.message : String(error))
                }
            }
        })
    ],
    // pages: {
    //     signIn: '/sign-in'
    // },
    session: {
        strategy: "jwt"
    },
    secret: process.env.NEXTAUTH_SECRET,
    callbacks: {
        async jwt({token,user}){
            if(user){
                token._id = user._id?.toString();
                token.isVerified = user.isVerified;
                token.isAcceptingMessages = user.isAcceptingMessages;
                token.username = user.username;
            }
            return token
        },
        async session({session, token}){
            if(token){
                session.user._id = token._id?.toString();
                session.user.isVerified = token.isVerified;
                session.user.isAcceptingMessages = token.isAcceptingMessages;
                session.user.username = token.username;
            }
            return session
        }
    }
})